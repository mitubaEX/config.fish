[[plugins]]
repo     = 'Shougo/denite.nvim'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
on_func  = ['denite#']
hook_add = ''' "{{{
  if has('nvim')
    let s:denite_cursorline = ''
    function! s:denite_save_cursorline() abort
      let output = execute('hi Cursorline')
      let s:denite_cursorline  = matchstr(output, '\(guibg=\)\@<=#[a-zA-Z0-9]\+')
    endfunction
    function! s:denite_change_cursorline() abort
      if g:colors_name is# 'nord'
        hi CursorLine guibg=#183203
      elseif g:colors_name =~# '^solarized8'
        if &background is# 'dark'
          hi Cursorline guibg=#073742
        else
          hi Cursorline guibg=#d8ee5b
        endif
      endif
      if s:denite_cursorline isnot# ''
        execute 'autocmd BufLeave <buffer> hi Cursorline guibg=' . s:denite_cursorline
      endif
    endfunction
    function! s:denite_restore_cursorline() abort
      if s:denite_cursorline isnot# ''
        execute 'hi Cursorline guibg=' . s:denite_cursorline
      endif
    endfunction
    augroup denite-cursorline
      autocmd!
      autocmd ColorScheme * call <SID>denite_save_cursorline()
      autocmd BufEnter \[denite\]-* call <SID>denite_change_cursorline()
      autocmd BufEnter denite-filter call <SID>denite_restore_cursorline()
    augroup END
  endif
  function! s:my_denite_outline(filetype) abort
    execute 'Denite' a:filetype ==# 'go' ? "decls:'%:p'" : 'outline'
  endfunction
  function! s:my_denite_decls(filetype) abort
    if a:filetype ==# 'go'
      Denite decls
    else
      call denite#util#print_error('decls does not support filetypes except go')
    endif
  endfunction
  function! s:my_denite_file_rec_goroot() abort
    if !executable('go')
      call denite#util#print_error('`go` executable not found')
      return
    endif
    let out = system('go env | grep ''^GOROOT='' | cut -d\" -f2')
    let goroot = substitute(out, '\n', '', '')
    call denite#start(
          \ [{'name': 'file/rec', 'args': [goroot]}],
          \ {'input': '.go'})
  endfunction
  function! s:my_denite_with_pwd(action) abort
    let pwd = get(b:, '__pwd__', '')
    if a:action ==# 'grep'
      call denite#start([{'name': 'grep', 'args': [pwd, '', '!']}])
     elseif a:action ==# 'file/rec'   elseif a:action ==# 'file/rec'
      call denite#start([{'name': 'file/rec', 'args': [pwd]}])
    else
      call denite#start([{'name': a:action, 'args': ['', pwd]}])
    endif
  endfunction

  "{{{
  " file
  noremap zt :<C-u>Denite -expand buffer file/rec<CR>
  " gitlog
  noremap zl :<C-u>Denite gitlog<CR>
  noremap zL :<C-u>Denite gitlog:all<CR>
  " grep
  noremap zg :<C-u>Denite grep:.<CR>
  noremap zG :<C-u>DeniteCursorWord grep:.<CR>
  " ghq
  noremap zh :<C-u>Denite ghq<CR>
  " move terminal
  noremap zZ :<C-u>Denite buffer -input=term:// -immediately<CR>
  " yankround
  noremap zy :<C-u>Denite yankround<CR>
  noremap zY :<C-u>Denite -default-action=delete yankround<CR>
  " filter script
  noremap zS :<C-u>Denite scriptnames<CR>
  "}}}
"}}} '''
hook_post_source = ''' "{{{
  " from doc
  function! s:candidate_file_rec(context) abort
    let path = a:context['targets'][0]['action__path']
    let dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
          \ {'name': 'file/rec', 'args': [dir]},
          \ ]]
    return {'sources_queue': sources_queue}
  endfunction
  function! s:candidate_grep(context) abort
    let path = a:context['targets'][0]['action__path']
    let dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
          \ {'name': 'grep', 'args': [path, '', '!']},
          \ ]]
    return {'is_interactive': v:false, 'sources_queue': sources_queue}
  endfunction
  function! s:narrow_grep(context, ...) abort
    let sources = get(a:context, 'sources', [])
    let filtered = filter(copy(sources),
          \ {i, v -> get(v, 'name', '') ==# 'grep'})
    if len(filtered) == 0
      call denite#util#print_error('current sources does not include `grep`.')
      return
    endif
    let args = get(filtered[0], 'args', [])
    let path = get(args, 0, '')
    let opt = get(args, 1, '')
    let input = get(a:context, 'input', '')
    let pattern = substitute(input, '\s\+', '.*', 'g')
    let sources_queue = a:context['sources_queue'] + [[
          \ {'name': 'grep', 'args': [path, opt, pattern]},
          \ ]]
    return {'sources_queue': sources_queue}
  endfunction
  " Use pt for grepping files
  call denite#custom#var('grep', 'command', ['pt'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--nogroup', '--nocolor', '--smart-case', '--ignore=.git', '--ignore=dist', '--ignore=node_modules'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  " Use fd for finding files
  if executable('fd')
    let file_rec_cmd = ['fd', '--follow', '--hidden', '--exclude', '.git', '.*']
  else
    let file_rec_cmd = ['pt', '--follow', '--nocolor', '--nogroup', '-g=', '']
  endif
  call denite#custom#var('my_file_rec', 'command', file_rec_cmd)
  call denite#custom#var('file/rec', 'command', file_rec_cmd)
  call denite#custom#action('buffer,directory,file,openable', 'my_file_rec', function('s:candidate_file_rec'))
  call denite#custom#action('buffer,directory,file,openable', 'file/rec', function('s:candidate_file_rec'))
  call denite#custom#action('buffer,directory,file,openable', 'grep', function('s:candidate_grep'))
  call denite#custom#action('file', 'grep', function('s:narrow_grep'))
  call denite#custom#source('grep', 'args', ['', '', '!'])
  call denite#custom#source('grep', 'converters', ['converter/abbr_word'])
  call denite#custom#source('z', 'default_action', 'narrow')
  " ref. https://github.com/arcticicestudio/nord-vim/issues/79
  call denite#custom#option('_', {
        \ 'cached_filter': v:true,
        \ 'cursor_shape': v:true,
        \ 'cursor_wrap': v:true,
        \ 'highlight_filter_background': 'DeniteFilter',
        \ 'highlight_matched_char': 'Underlined',
        \ 'max_dynamic_update_candidates': 100000,
        \ 'prompt': '$ ',
        \ 'split': 'floating',
        \ 'start_filter': v:true,
        \ })
  function! s:denite_detect_size() abort
    let s:denite_winheight = 20
    let s:denite_winrow = &lines > s:denite_winheight ? (&lines - s:denite_winheight) / 2 : 0
    let s:denite_winwidth = &columns > 240 ? &columns / 2 : 120
    let s:denite_wincol = &columns > s:denite_winwidth ? (&columns - s:denite_winwidth) / 2 : 0
    call denite#custom#option('_', {
          \ 'wincol': s:denite_wincol,
          \ 'winheight': s:denite_winheight,
          \ 'winrow': s:denite_winrow,
          \ 'winwidth': s:denite_winwidth,
          \ })
  endfunction
  augroup denite-detect-size
    autocmd!
    autocmd VimResized * call <SID>denite_detect_size()
  augroup END
  call s:denite_detect_size()
"}}} '''

[plugins.ftplugin]
denite = ''' "{{{
  let b:auto_cursorline_disabled = 1
  let b:cursorword = 0
  if exists('&winblend')
    setlocal winblend=20
  endif
  if exists('&pumblend')
    setlocal pumblend=30
  endif
  nnoremap <silent><buffer> <C-j> j
  nnoremap <silent><buffer> <C-k> k
  nnoremap <silent><buffer><expr> <C-a>   denite#do_map('do_action', 'file/rec')
  nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-g>   denite#do_map('do_action', 'grep')
  nnoremap <silent><buffer><expr> <C-x>   denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select).'j'
  nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
"}}} '''
denite-filter = ''' "{{{
  let b:auto_cursorline_disabled = 1
  let b:cursorword = 0
  if exists('&winblend')
    setlocal winblend=20
  endif
  if exists('&pumblend')
    setlocal pumblend=30
  endif
  inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  inoremap <silent><buffer><expr> <C-t>   denite#do_map('toggle_matchers', 'matcher/regexp')
  nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  " These mappings are not recommended in doc.
  inoremap <silent><buffer> <C-j>   <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
  inoremap <silent><buffer> <C-k>   <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
"}}} '''

[[plugins]]
repo      = 'Jagua/vim-denite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'delphinus/my-denite-sources'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'delphinus/vim-denite-node-modules'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'delphinus/vim-denite-output-files'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'delphinus/vim-denite-scriptnames'
on_source = ['denite.nvim']

[[plugins]]
repo      = 'neoclide/denite-git'
on_source = ['denite.nvim', 'my-denite-sources']
depends   = ['vim-easygit']

[[plugins]]
repo = 'neoclide/vim-easygit'

[[plugins]]
repo      = 'rafi/vim-denite-z'
on_source = ['denite.nvim']

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
on_source = ['denite.nvim']
hook_add = ''' "{{{
  "   U+E287
  "   U+F07B
  "   U+E601
  "   U+E60e
  "   U+E769
  "   U+E7C4
  "   U+f542
  let g:webdevicons_enable_nerdtree = 0
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = "\ue287"
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = "\uf07b"
  " overwrite setting for 'vue' to use U+F542
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     "\ue769",
        \ 'perl':     "\ue769",
        \ 'sqlite':   "\ue7c4",
        \ 'tt':       "\ue60e",
        \ 'txt':      "\ue601",
        \ 'vue':      "\uf542",
        \ }
"}}} '''

[[plugins]]
#repo     = 'LeafCage/yankround.vim'
repo      = 'delphinus/yankround.vim'
rev       = 'feature/denite'
on_source = ['denite.nvim']
on_map    = ['<Plug>(yankround-']
hook_add  = ''' "{{{
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <A-p> <Plug>(yankround-prev)
  nmap <A-P> <Plug>(yankround-next)
"}}} '''
