[[plugins]]
repo = 'Shougo/dein.vim'
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''

# ale {{{
# [[plugins]]
# repo = 'dense-analysis/ale'
# hook_add = '''
#   " let g:go_fmt_fail_silently = 1
#
#   " function! ALEStatus()
#   "   let l:counts = ale#statusline#Count(bufnr(''))
# 		"
#   "   let l:all_errors = l:counts.error + l:counts.style_error
#   "   let l:all_non_errors = l:counts.total - l:all_errors
# 		"
#   "   return l:counts.total == 0 ? 'OK' : printf(
# 		"    \   '⚠ %d ⨉ %d',
# 		"    \   all_non_errors,
# 		"    \   all_errors
# 		"    \)
#   " endfunction
#
#   let g:ale_linters = {
#   \   'javascript': ['eslint', 'prettier', 'flow'],
#   \   'jsx': ['stylelint', 'eslint', 'prettier'],
#   \   'tsx': ['tslint', 'prettier'],
#   \   'hs': ['hlint'],
#   \   'tex': ['alex'],
#   \   'ruby': ['standardrb', 'rubocop'],
#   \   'vim': ['vint'],
#   \}
#   let g:ale_linter_aliases = {'jsx': 'css'}
#   let g:ale_fixers = {
#   \   'python': ['autopep8', 'isort'],
#   \   'javascript': ['eslint'],
#   \   'typescript': ['tslint', 'prettier'],
#   \   'haskell': ['stylish-haskell']
#   \}
#   let g:ale_fix_on_save = 1
#   let g:ale_javascript_prettier_options = '--single-quote --trailing-comma --arrow-parens always es5'
#   let g:ale_set_loclist = 0
#   " let g:ale_set_quickfix = 1
#   " let g:ale_open_list = 1
#
#   " エラーと警告がなくなっても開いたままにする
#   " let g:ale_keep_list_window_open = 1
# '''
# }}}

# lightline {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['lambdalisue/wifi.vim', 'lambdalisue/battery.vim']
hook_add = '''
set noshowmode
let g:lightline = {
     \ 'separator': { 'left': '', 'right': '' },
     \ 'colorscheme': 'onedark',
     \ 'subseparator': { 'left': '', 'right': '' },
     \ 'tabline': {
     \   'left': [['tabs']],
     \   'right': [['close'], ['gitbranch', 'wifi', 'battery']],
     \ },
     \ 'active': {
     \   'left': [
     \     ['mode', 'paste'],
     \     [ 'gitbranch', 'readonly', 'filename', 'modified' ],
     \   ],
     \   'right': [
     \     [ 'lineinfo' ],
     \     [ 'percent' ],
     \     [ 'cocstatus', 'currentfunction', 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ],
     \  ],
     \ },
     \ 'component': {
     \   'charvaluehex': '0x%B'
     \ },
     \ 'component_function': {
     \   'cwd': 'getcwd',
     \   'wifi': 'wifi#component',
     \   'battery': 'battery#component',
     \   'ale': 'ALEStatus',
     \   'gitbranch': 'fugitive#head',
     \   'filename': 'LightLineFilename',
     \   'cocstatus': 'coc#status',
     \   'currentfunction': 'CocCurrentFunction',
     \   'method': 'NearestMethodOrFunction'
     \ },
     \ }

function! LightLineFilename()
  return expand('%')
endfunction
'''
# }}}

# fzf {{{
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" ref: https://postd.cc/vim3/
nmap ; :Buffers<CR>
" nmap <Leader>t :Files<CR>
" nmap r :Tags<CR>
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=test --exclude=spec --exclude=vendor'
'''
# }}}

# quickrun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\   'haskell' : { 'type' : 'haskell/stack' },
\   'haskell/stack' : {
\       'command' : 'stack',
\       'exec' : '%c %o %s %a',
\       'cmdopt' : 'runghc',
\   },
\   'go': {
\     'command': 'go',
\     'exec': '%c run %a',
\     'args': '**/*.go',
\     'tempfile': '%{tempname()}.go',
\     'hook/output_encode/encoding': 'utf-8',
\     'hook/cd/directory': '%S:p:h',
\   },
\}
'''
# }}}

# defx {{{
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
	\ defx#do_action('open', 'botright vsplit')
  nnoremap <silent><buffer><expr> c
	\ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
	\ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
	\ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
	\ defx#do_action('open', 'botright vsplit')
  nnoremap <silent><buffer><expr> E
	\ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
	\ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
	\ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
	\ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
	\ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
	\ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
	\ defx#do_action('toggle_columns',
	\                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
	\ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
	\ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
	\ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
	\ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
	\ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
	\ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
	\ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
	\ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
	\ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
	\ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
	\ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
	\ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
	\ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
	\ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
	\ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
	\ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
	\ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
	\ defx#do_action('change_vim_cwd')
endfunction

call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ })
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_source = '''
" defx
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
'''
# }}}

# colorscheme {{{
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'yassinebridi/vim-purpura'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'sonph/onehalf'
rtp = 'vim/'

[[plugins]]
repo = 'sainnhe/gruvbox-material'

[[plugins]]
repo = 'arcticicestudio/nord-vim'

[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'skbolton/embark'

[[plugins]]
repo = 'bluz71/vim-moonfly-colors'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'rhysd/vim-color-spring-night'
# }}}

# for vim script {{{
[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'vim-jp/vital.vim'
hook_add = '''
set runtimepath+=~/.config/nvim/repos/github.com/vim-jp/vital.vim
'''
merged = 0
# }}}

# git {{{
[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-fugitive'
depends = ['tpope/vim-rhubarb']

[[plugins]]
repo = 'lambdalisue/gina.vim'

# }}}

# improve key stroke {{{
[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['kana/vim-operator-user']
hook_add = '''
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
" map <silent>sd <Plug>(operator-surround-delete)
" map <silent>sr <Plug>(operator-surround-replace)

" saiw(: aaa -> (aaa)
'''

# replace: cs(]
# delete: ds(
[[plugins]]
repo = 'tpope/vim-surround'

# repeat surround.vim
[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'

# https://tyru.hatenablog.com/entry/2020/04/26/110000
[[plugins]]
repo = 'tyru/columnskip.vim'

# [[, ]]: move function block
[[plugins]]
repo = 'mitubaEX/jumpy.vim'

# j, k accelerated
[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

# camel caseの単語ごとに移動できる
[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
'''
# }}}

# auto pair for paren {{{
[[plugins]]
repo = 'cohama/lexima.vim'
# }}}

# util command {{{
[[plugins]]
repo = 'rhysd/clever-split.vim'

[[plugins]]
repo = 'brooth/far.vim'
hook_add = '''
" Usage:
" :Far <search_word> <replace word> **/*
" :Fardo
let g:far#source = 'rg'
'''

# keybinds of <Leader>*
# :WhichKey '<Space>'
[[plugins]]
repo = 'liuchengxu/vim-which-key'

# :RengBang
# 0, 0, 0 -> 0, 1, 2
[[plugins]]
repo = 'deris/vim-rengbang'

# require: cargo install silicon
# Silicon <path>
[[plugins]]
repo = 'segeljakt/vim-silicon'

# ex: :OpenBrowser <url>
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
let g:memolist_path = "$HOME/.memo"
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'

[[plugins]]
repo = 'vim-test/vim-test'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# open result as buffer
# USAGE: :Bufferize <command>
[[plugins]]
repo = 'AndrewRadev/bufferize.vim'

#
[[plugins]]
repo = 'vuciv/vim-bujo'
hook_add = '''
let g:bujo#todo_file_path = $HOME . "/.cache/bujo"
'''
# }}}

# vim extension {{{
[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_lists = [
\ { 'type': 'files',     'header': ['   MRU']            },
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
  \ { 'type': 'commands',  'header': ['   Commands']       },
  \ ]
let g:startify_bookmarks = [ {'c': '~/.config/nvim/init.vim'}, '~/.zshrc' ]
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

# +: expand visual line
# _: reverse
[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
let g:comfortable_motion_friction = 200
let g:comfortable_motion_air_drag = 4.0
'''

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'mg979/vim-visual-multi'

# first word select: cx {motion}
# second word select: cx {motion}
# exchange
[[plugins]]
repo = 'tommcdo/vim-exchange'

# <C-j> move current line to one up line
# visual mode is same
[[plugins]]
repo = 'matze/vim-move'
hook_add = '''
let g:move_key_modifier = 'C'
'''

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'edkolev/tmuxline.vim'

# ga: show current string code
[[plugins]]
repo = 'tpope/vim-characterize'

# highlight uniq word for f, F
# NOTE: When open large file, slow.
# [[plugins]]
# repo = 'unblevable/quick-scope'

[[plugins]]
repo = 'kana/vim-operator-user'

# yank string in visual mode
# Do not move cursor
[[plugins]]
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = ['kana/vim-operator-user']
hook_add = '''
map <expr> y operator#stay_cursor#wrapper("y")
'''

[[plugins]]
repo = 'lambdalisue/wifi.vim'

[[plugins]]
repo = 'lambdalisue/battery.vim'

[[plugins]]
repo = 'liuchengxu/vista.vim'

# add new text object
[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
let g:undotree_HighlightChangedWithSign = 0
let g:undotree_WindowLayout             = 4
let g:undotree_SetFocusWhenToggle       = 1
'''

# improve search and execute command
[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
call wilder#enable_cmdline_enter()

set wildcharm=<Tab>
cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

" only / and ? is enabled by default
call wilder#set_option('modes', ['/', '?', ':'])
'''
# }}}

# other (ex: hobby) {{{
[[plugins]]
repo = 'dstein64/vim-smile'

[[plugins]]
repo = 'mitubaEX/float_timer'
hook_add = '''
let g:disable_float_timer_window = 1
'''
# }}}
