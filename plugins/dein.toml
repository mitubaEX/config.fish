[[plugins]]
repo = 'Shougo/dein.vim'
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''

# fzf {{{
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" ref: https://postd.cc/vim3/
nmap ; :Buffers<CR>
" nmap <Leader>t :Files<CR>
" nmap r :Tags<CR>
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=test --exclude=spec --exclude=vendor'
'''
# }}}

# quickrun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\   'haskell' : { 'type' : 'haskell/stack' },
\   'haskell/stack' : {
\       'command' : 'stack',
\       'exec' : '%c %o %s %a',
\       'cmdopt' : 'runghc',
\   },
\   'go': {
\     'command': 'go',
\     'exec': '%c run %a',
\     'args': '**/*.go',
\     'tempfile': '%{tempname()}.go',
\     'hook/output_encode/encoding': 'utf-8',
\     'hook/cd/directory': '%S:p:h',
\   },
\}
'''
# }}}

# for vim script {{{
[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'vim-jp/vital.vim'
hook_add = '''
set runtimepath+=~/.config/nvim/repos/github.com/vim-jp/vital.vim
'''
merged = 0
# }}}

# git {{{
[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-fugitive'
depends = ['tpope/vim-rhubarb']

[[plugins]]
repo = 'lambdalisue/gina.vim'
# }}}

# improve key stroke {{{
[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['kana/vim-operator-user']
hook_add = '''
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
" map <silent>sd <Plug>(operator-surround-delete)
" map <silent>sr <Plug>(operator-surround-replace)

" saiw(: aaa -> (aaa)
'''

# add: ysiw(
# replace: cs(]
# delete: ds(
[[plugins]]
repo = 'tpope/vim-surround'

# repeat surround.vim
[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'

# https://tyru.hatenablog.com/entry/2020/04/26/110000
[[plugins]]
repo = 'tyru/columnskip.vim'

# [[, ]]: move function block
[[plugins]]
repo = 'mitubaEX/jumpy.vim'

# j, k accelerated
[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

# camel case„ÅÆÂçòË™û„Åî„Å®„Å´ÁßªÂãï„Åß„Åç„Çã
[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
let g:sneak#label = 1

" case insensitive sneak
let g:sneak#use_ic_scs = 1

" imediately move tot the next instance of search, if you move the cursor sneak is back to default behavior
let g:sneak#s_next = 1

nmap gs <Plug>Sneak_s
nmap gS <Plug>Sneak_S

highlight Sneak guifg=black guibg=#00C7DF ctermfg=black ctermbg=cyan
highlight SneakScope guifg=red guibg=yellow ctermfg=red ctermbg=yellow

" Cool prompt
let g:sneak#prompt = 'üîé '
'''

[[plugins]]
repo = 'AndrewRadev/tagalong.vim'
hook_add = '''
let g:tagalong_filetypes = ['html', 'xml', 'jsx', 'eruby', 'ejs', 'eco', 'php', 'htmldjango', 'javascriptreact', 'typescriptreact', 'javascript']
let g:tagalong_verbose = 1
'''
# }}}

# auto pair for paren {{{
[[plugins]]
repo = 'cohama/lexima.vim'

# for html tags
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js,*.tsx'
let g:closetag_filetypes = 'html,xhtml,phtml,javascript,javascriptreact,typescript,typescriptreact'
'''
# }}}

# util command {{{
[[plugins]]
repo = 'rhysd/clever-split.vim'

[[plugins]]
repo = 'brooth/far.vim'
hook_add = '''
" Usage:
" :Far <search_word> <replace word> **/*
" :Fardo
let g:far#source = 'rg'
'''

# keybinds of <Leader>*
# :WhichKey '<Space>'
[[plugins]]
repo = 'liuchengxu/vim-which-key'

# :RengBang
# 0, 0, 0 -> 0, 1, 2
[[plugins]]
repo = 'deris/vim-rengbang'

# require: cargo install silicon
# Silicon <path>
[[plugins]]
repo = 'segeljakt/vim-silicon'

# ex: :OpenBrowser <url>
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
let g:memolist_path = "$HOME/.memo"
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
let g:floaterm_gitcommit='floaterm'
let g:floaterm_wintitle=0
let g:floaterm_autoclose=1
'''

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
let test#ruby#rspec#options = {
  \ 'nearest': '--backtrace',
  \ 'file':    '--format documentation',
  \ 'suite':   '--tag ~slow',
\}
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

# open result as buffer
# USAGE: :Bufferize <command>
[[plugins]]
repo = 'AndrewRadev/bufferize.vim'

#
[[plugins]]
repo = 'vuciv/vim-bujo'
hook_add = '''
let g:bujo#todo_file_path = $HOME . "/.cache/bujo"
'''

[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = '''
" Show line numbers in search rusults
let g:any_jump_list_numbers = 0

" Auto search references
let g:any_jump_references_enabled = 1

" Auto group results by filename
let g:any_jump_grouping_enabled = 0

" Amount of preview lines for each search result
let g:any_jump_preview_lines_count = 5

" Max search results, other results can be opened via [a]
let g:any_jump_max_search_results = 10

" Prefered search engine: rg or ag
let g:any_jump_search_prefered_engine = 'rg'

" Search results list styles:
" - 'filename_first'
" - 'filename_last'
let g:any_jump_results_ui_style = 'filename_first'

" Any-jump window size & position options
let g:any_jump_window_width_ratio  = 0.6
let g:any_jump_window_height_ratio = 0.6
let g:any_jump_window_top_offset   = 4

" Customize any-jump colors with extending default color scheme:
" let g:any_jump_colors = { "help": "Comment" }

" Or override all default colors
let g:any_jump_colors = {
      \"plain_text":         "Comment",
      \"preview":            "Comment",
      \"preview_keyword":    "Operator",
      \"heading_text":       "Function",
      \"heading_keyword":    "Identifier",
      \"group_text":         "Comment",
      \"group_name":         "Function",
      \"more_button":        "Operator",
      \"more_explain":       "Comment",
      \"result_line_number": "Comment",
      \"result_text":        "Statement",
      \"result_path":        "String",
      \"help":               "Comment"
      \}

" Disable default any-jump keybindings (default: 0)
let g:any_jump_disable_default_keybindings = 1

" Remove comments line from search results (default: 1)
let g:any_jump_remove_comments_from_results = 1

" Custom ignore files
" default is: ['*.tmp', '*.temp']
let g:any_jump_ignored_files = ['*.tmp', '*.temp']

" Search references only for current file type
" (default: false, so will find keyword in all filetypes)
let g:any_jump_references_only_for_current_filetype = 0

" Disable search engine ignore vcs untracked files
" (default: false, search engine will ignore vcs untracked files)
let g:any_jump_disable_vcs_ignore = 0

" disable default key map
let g:any_jump_disable_default_keybindings = 1
'''

# When output .coverage file
# run :HighlightCoverage
# NOTE: rspec is not supported
[[plugins]]
repo = 'mgedmin/coverage-highlight.vim'
# }}}

# vim extension {{{
[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
let g:startify_lists = [
\ { 'type': 'files',     'header': ['   MRU']            },
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
  \ { 'type': 'commands',  'header': ['   Commands']       },
  \ ]
let g:startify_bookmarks = [ {'c': '~/.config/nvim/init.vim'}, '~/.zshrc' ]
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

# +: expand visual line
# _: reverse
[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
let g:comfortable_motion_friction = 200
let g:comfortable_motion_air_drag = 4.0
'''

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'mg979/vim-visual-multi'

# first word select: cx {motion}
# second word select: cx {motion}
# exchange
[[plugins]]
repo = 'tommcdo/vim-exchange'

# <C-j> move current line to one up line
# visual mode is same
[[plugins]]
repo = 'matze/vim-move'
hook_add = '''
let g:move_key_modifier = 'C'
'''

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'edkolev/tmuxline.vim'

# ga: show current string code
[[plugins]]
repo = 'tpope/vim-characterize'

# highlight uniq word for f, F
# NOTE: When open large file, slow.
# [[plugins]]
# repo = 'unblevable/quick-scope'

[[plugins]]
repo = 'kana/vim-operator-user'

# yank string in visual mode
# Do not move cursor
[[plugins]]
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = ['kana/vim-operator-user']
hook_add = '''
map <expr> y operator#stay_cursor#wrapper("y")
'''

[[plugins]]
repo = 'lambdalisue/wifi.vim'

[[plugins]]
repo = 'lambdalisue/battery.vim'

[[plugins]]
repo = 'liuchengxu/vista.vim'

# add new text object
[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
let g:undotree_HighlightChangedWithSign = 0
let g:undotree_WindowLayout             = 4
let g:undotree_SetFocusWhenToggle       = 1
'''

# improve search and execute command
[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
call wilder#enable_cmdline_enter()

set wildcharm=<Tab>
cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

" only / and ? is enabled by default
call wilder#set_option('modes', ['/', '?', ':'])
'''

# fern
[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
hook_add = '''
" in millisecond, used for both CursorHold and CursorHoldI,
" use updatetime instead if not defined
let g:cursorhold_updatetime = 100
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#disable_viewer_hide_cursor = 1
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = ['lambdalisue/fern.vim']
hook_add = '''
let g:fern#renderer = "nerdfont"
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
# }}}

# other (ex: hobby) {{{
[[plugins]]
repo = 'dstein64/vim-smile'

[[plugins]]
repo = 'mitubaEX/float_timer'
hook_add = '''
let g:disable_float_timer_window = 1
'''
# }}}
