[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:go_fmt_fail_silently = 1
  let g:ale_fix_on_save = 1
  " let g:neomake_javascript_enabled_makers = ['tslint', 'eslint', 'flow']

  " let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  function! ALEStatus()
    " return ALEGetStatusLine()
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
		    \   '⚠ %d ⨉ %d',
		    \   all_non_errors,
		    \   all_errors
		    \)
  endfunction

  let g:ale_linters = {'javascript': ['eslint', 'prettier', 'flow'], 'jsx': ['stylelint', 'eslint', 'prettier'], 'tsx': ['tslint', 'prettier'], 'hs': ['hlint'], 'tex': ['alex']}
  let g:ale_linter_aliases = {'jsx': 'css'}
  let g:ale_fixers = {
  \   'python': ['autopep8', 'isort'],
  \   'javascript': ['eslint', 'prettier'],
  \   'typescript': ['tslint', 'prettier'],
  \   'haskell': ['stylish-haskell']
  \}
  let g:ale_fix_on_save = 1
  let g:ale_javascript_prettier_options = '--single-quote --trailing-comma --arrow-parens always es5'
  let g:ale_set_loclist = 0
  " let g:ale_set_quickfix = 1
  " let g:ale_open_list = 1

  " エラーと警告がなくなっても開いたままにする
  " let g:ale_keep_list_window_open = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<denite<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  " 参考:http://replicity.hateblo.jp/entry/2017/06/03/140731
  "
  "C-j,C-kで上下移動
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
  "ESCキーでdeniteを終了
  call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')
  call denite#custom#map('normal', '<esc>', '<denite:quit>', 'noremap')

  " C-sでsplit表示
  call denite#custom#map('insert', '<C-s>', '<denite:do_action:vsplit>', 'noremap')

  " tabopen
  call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>', 'noremap')

  " プロンプトの左端に表示される文字を指定
  call denite#custom#option('default', 'prompt', '>')

  " Deniteの設定
  nnoremap [denite] <Nop>
  nmap <C-f> [denite]

  " -buffer-name=
  nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>

  " filename
  nnoremap <silent> [denite]f  :<C-u>Denite file_rec -buffer-name=search-buffer-denite<CR>

  " Denite grep検索結果を再表示する
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  " resumeした検索結果の次の行の結果へ飛ぶ
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
  " resumeした検索結果の前の行の結果へ飛ぶ
  nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
  ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>denite>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'''

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = ['dart']

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set noshowmode
  let g:lightline = {
        \'active': {
        \  'left': [
        \    ['mode', 'paste'],
        \    [ 'gitbranch', 'readonly', 'filename', 'modified' ],
        \    ['ale'],
        \  ],
        \  'right': [
        \    [ 'lineinfo' ],
        \    [ 'percent' ],
        \    [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ],
        \ ],
        \},
        \ 'component': {
        \   'charvaluehex': '0x%B'
        \ },
        \'component_function': {
        \  'ale': 'ALEStatus',
        \  'gitbranch': 'fugitive#head',
        \  'filename': 'LightLineFilename'
        \}
        \ }

  function! LightLineFilename()
    return expand('%')
  endfunction
'''

[[plugins]] # コード補完
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
" ref: https://postd.cc/vim3/
nmap ; :Buffers<CR>
" nmap <Leader>t :Files<CR>
" nmap r :Tags<CR>
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=test --exclude=spec --exclude=vendor'
'''

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set shell=/bin/bash
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'mattn/gist-vim'
depends = ['mattn/webapi-vim']

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
depends = ['godlygeek/tabular']

[[plugins]]
repo = 'iamcco/markdown-preview.vim'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c']

#tex
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'mitubaEX/codic-vim'

[[plugins]]
repo = 'zchee/deoplete-go'

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = ['rust']
hook_add = '''
let g:deoplete#sources#rust#racer_binary='/usr/local/bin/racer'
let g:deoplete#sources#rust#rust_source_path='/usr/local/Cellar/rust/1.25.0/lib/rustlib/src/rust/src'
'''

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'Shougo/deoplete-clangx'

[[plugins]]
repo = 'maxbrunsfeld/vim-yankstack'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\   'haskell' : { 'type' : 'haskell/stack' },
\   'haskell/stack' : {
\       'command' : 'stack',
\       'exec' : '%c %o %s %a',
\       'cmdopt' : 'runghc',
\   },
\}
'''

[[plugins]]
repo = 'ElmCast/elm-vim'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'AndrewRadev/sideways.vim'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'

[[plugins]]
repo = 'rhysd/github-complete.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['kana/vim-operator-user']
hook_add = '''
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)

" saiw(: aaa -> (aaa)
'''

[[plugins]]
repo = 'rhysd/vim-grammarous'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'elixir-editors/vim-elixir'

[[plugins]]
repo = 'JuliaEditorSupport/julia-vim'

[[plugins]]
repo = 'kristijanhusak/deoplete-phpactor'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''

let g:startify_lists = [
\ { 'type': 'files',     'header': ['   MRU']            },
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
  \ { 'type': 'commands',  'header': ['   Commands']       },
  \ ]
let g:startify_bookmarks = [ {'c': '~/.config/nvim/init.vim'}, '~/.zshrc' ]
'''

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'

[[plugins]]
repo = 'kana/vim-smartinput'
hook_add = '''
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'udalov/kotlin-vim'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']
hook_add = '''
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
'''

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'basyura/twibill.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'basyura/TweetVim'
depends = ['basyura/twibill.vim', 'tyru/open-browser.vim']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'css'
hook_add = '''
au BufRead,BufNewFile *.scss set filetype=scss.css
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

# build できない場合は、$HOME/.config/nvim/repos/github.com/mhartington/nvim-typescriptのinstall.shをrunする
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = 'bash install.sh'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'

# 動かない時は、yarn add global typescript, yarn add global neovimとかしたらrunする
[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ['typescript', 'tsx', 'typescrip.tsx']
hook_source = '''

" C-] jump definition

" check each reference
nnoremap <silent> <C-y>r :TsuReferences<CR>

'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = ['go']
hook_source = '''
let g:LanguageClient_serverCommands = {
    \ 'go': ['gopls'],
    \ }
    " \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
set completefunc=LanguageClient#complete
let g:LanguageClient_diagnosticsEnable = 0
let g:LanguageClient_selectionUI = 'fzf'
let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')

" jump to method
nnoremap <silent> <C-y>d :call LanguageClient#textDocument_definition()<CR>

" check each reference
nnoremap <silent> <C-y>r :call LanguageClient#textDocument_references()<CR>
'''

[[plugins]]
repo = 'takkii/totolot'

[[plugins]]
repo = 'takkii/ruby-dictionary3'
